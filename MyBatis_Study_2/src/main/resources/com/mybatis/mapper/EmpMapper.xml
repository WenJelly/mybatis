<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.mybatis.mapper.EmpMapper">

<!--    List<Emp> getAllEmp();-->

<!--
    resultMap:设置自定义映射关系
    type:设置映射关系中的实体类型 如Emp,User
    子标签
        id:设置主键的映射关系
        result:设置普通的映射关系
    属性
        property:设置映射关系中的属性名,必须是type属性所设置的实体的属性名
        colum:设置映射关系中的字段名,必须是sql语句查询出的字段名

-->
    <resultMap id="empResultMap" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
<!--    resultMap相对应↑↓-->
    </resultMap>
    <select id="getAllEmp" resultMap="empResultMap">
        select * from t_emp;
    </select>

<!--    <select id="getAllEmp" resultType="Emp">-->
<!--        select * from t_emp;-->
<!--    </select>-->

<!--    处理多对一的映射关系-->
<!--    第一种方式-->
    <resultMap id="empAndDeptResultMapOne" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
        <result property="dept.did" column="did"></result>
        <result property="dept.deptName" column="dept_name"></result>
    </resultMap>

<!--    第二种方式-->
    <resultMap id="empAndDeptResultMapTwo" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>
<!--        专门处理多对一的映射关系
             association:处理多对一的映射关系
             property:需要处理多对的映射关系的属性名
             javaType:该属性的类型
-->
        <association property="dept" javaType="Dept">
            <id property="did" column="did"></id>
            <result property="deptName" column="dept_name"></result>
        </association>
    </resultMap>

<!--    Emp getEmpAndDept(@Param("eid") Integer eid);-->
    <select id="getEmpAndDept" resultMap="empAndDeptResultMapTwo">
        select * from t_emp left join t_dept on t_emp.did = t_dept.did
                where t_emp.eid = #{eid};
    </select>


<!--
    第三种方式:分布查询多对一映射关系
-->
<!--    Emp getEmpAndDeptByStepOne(@Param("eid") Integer eid);-->
    <resultMap id="empAndDeptByStepResultMap" type="Emp">
        <id property="eid" column="eid"></id>
        <result property="empName" column="emp_name"></result>
        <result property="age" column="age"></result>
        <result property="sex" column="sex"></result>
        <result property="email" column="email"></result>

<!--        有点抽象,P44-->
<!--        select:设置分步查询的sql的唯一标识(namespace.sQLId或mapper接口的全类名.方法名)
            column:设置分布查询的条件
            fetchType:当开启了全局的延迟加载之后，可通过此属性手动控制延迟加载的效果
            fetchType="lazy / eager" lazy表示延迟加载,eager表示立即加载

-->

        <association property="dept"
                     select="com.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
                     column="did"
                     fetchType="eager">
        </association>

    </resultMap>
    <select id="getEmpAndDeptByStepOne" resultMap="empAndDeptByStepResultMap">
        select * from t_emp where eid = #{eid};
    </select>



<!--    List<Emp> getDeptAndEmpByStepTow(@Param("did") Integer did);-->
    <select id="getDeptAndEmpByStepTow" resultType="Emp">
        select * from t_emp where did = #{did};
    </select>
</mapper>