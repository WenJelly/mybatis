<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.mybatis.mapper.CacheMapper">

<!--    在在mapper配苦文件中添加的cache标签可以设置一些属性:-->
<!--    eviction属性:缓存回收策略-->
<!--        LRU(Least Recently Used)-最近最少使用的:移除呈长时间不被使用的对象。-->
<!--        FIFO (First in First out)-先进先出:按对象进入缓存的顺序来移除它们。-->
<!--        SOFT一软引用:移除基于垃圾回收器状态和软引用规则的对象。-->
<!--        WEAK-羽引用:更积极地移除基于垃圾收集器状态和羽引用规则的对象。默认的是LRU。-->
<!--        flushInterval属性:刷新间语，单位毫秒-->
<!--        默认情况是不设置，也就是没有刷新间隔。缓存仅仅调用语句时刷新-->
<!--        size属性:引用数目:正整数-->
<!--        代表缓存最多可以存储多少个对象,太大容易导致内存溢出. readOnly属性:只读,true/false-->
<!--        true:只读缓存;会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很王要的性能优势。-->
<!--        false: 读写媛存;会返回缓存对象的拷贝〈通过序列化)。这会慢一些，但是安全，因此默认是false。-->



<!--    先查询二级缓存,因为二级缓存中可能会有其他程序已经查出来的数据，可以拿来直接使用。-->
<!--    如果二级绥存没有命中,再查询—级缓存-->
<!--    如果一级缓存也没有命中,则查询数据库-->
<!--    SqlSession关闭之后,一级缓存中的数据会写入二级缓存-->



<!--    如果不用的话就是mybatis默认的-->
<!--    <cache />-->
<!--    这样就不是默认的了-->
<!--    第三方缓存,可以指定保存地方等等-->
    <cache type="org.mybatis.caches.ehcache.EhcacheCache" />

<!--    Emp getEmpByEid(@Param("eid") Integer eid);-->
    <select id="getEmpByEid" resultType="Emp">
        select * from t_emp where eid = #{eid};
    </select>
</mapper>